#!/usr/bin/env lua

local parseTerminalArgs = function(tArgs)
    local parsedArgs = {
        basePath = nil,
        showHelp = false,
        useMockLib = false,
        runTests = false,
    }

    local expectFlagValueFor = nil
    for _, tArg in ipairs(tArgs) do
        if expectFlagValueFor == '--base' then
            expectFlagValueFor = nil
            parsedArgs.basePath = tArg
        elseif tArg == '-h' or tArg == '--help' then
            parsedArgs.showHelp = true
        elseif tArg == '--mock' then
            parsedArgs.useMockLib = true
            if parsedArgs.basePath == nil then
                parsedArgs.basePath = './'
            end
        elseif tArg == '--base' then
            expectFlagValueFor = tArg
        elseif tArg == '--test' then
            parsedArgs.runTests = true
            if parsedArgs.basePath == nil then
                parsedArgs.basePath = './'
            end
        end
    end

    if parsedArgs.basePath == nil then
        parsedArgs.basePath = '/disk/computer-craft/'
    end

    return parsedArgs
end

local inputs = parseTerminalArgs({ ... })

-- Implementation for import() --
-- Note that import() should only be called at the top of a module,
-- otherwise, it won't be able to properly resolve relative module paths.
do
    local BASE_PATH = inputs.basePath
    local resolvePotentiallyRelativePath
    local dirName
    local moduleCache = {}
    local importStack = { 'run' }

    -- Can be used to help with circular dependencies.
    -- Returns an object with a `.load()` function, that can be
    -- called to retrieve the actual module at the point where you need it.
    _G.lazyImport = function (path)
        local absPath = resolvePotentiallyRelativePath(path)
        return {
            load = function()
                if moduleCache[absPath] == nil then
                    table.insert(importStack, absPath)
                    moduleCache[absPath] = dofile(BASE_PATH..absPath)
                    table.remove(importStack)
                end
                return moduleCache[absPath]
            end
        }
    end

    _G.import = function (path)
        return _G.lazyImport(path).load()
    end

    resolvePotentiallyRelativePath = function(path)
        local dotSlash = string.sub(path, 1, 2) == './'
        local dotDotSlash = string.sub(path, 1, 3) == '../'
        if not dotSlash and not dotDotSlash then
            -- it's already absolute
            return path
        end
        if dotSlash then
            path = string.sub(path, 3)
        end

        local baseFilePath = importStack[#importStack]
        local basePath = dirName(baseFilePath)
        return basePath .. path
    end

    -- Givin 'abc/def/ghi.lua', this returns 'abc/def/'
    dirName = function(path)
        local reversed = string.reverse(path)
        local slashPos = string.find(reversed, '/')
        if slashPos == nil then
            return ''
        else
            return string.reverse(string.sub(reversed, slashPos))
        end
    end
end

local base
local world
local hookListeners = {}
if inputs.showHelp then
    print('USAGE: run [...flags]')
    print('  --help/-h: This help')
    print('  --mock: Load a mock library to')
    print('          emulate the turtle library.')
    print('          Useful for testing outside a')
    print('          turtle enviornment.')
    print('  --base <path>: Sets the base absolute')
    print('          path to something other than')
    print('          the default. Imports are done')
    print('          relative to this path.')
    print('          The provided path should end')
    print('          with a "/".')
    print('          If not provided, will default to "./"')
    print('          or "/disk/computer-craft/", depending on')
    print('          the other flags provided (it tries to guess')
    print('          if you are developing or running it')
    print('          within Minecraft.')
    print('  --test: Run automated tests')
    return
end

-- Don't do any imports until after we've had the chance to show the help,
-- since the help explains required flags that may be needed to make imports work.
import('_debug.lua').registerGlobal()

-- Temporary code for testing turtle script.
-- do
--     local turtlescript = import('turtlescript/init.lua')
--     turtlescript.run([[
--         --! TURTLE SCRIPT
--         print(2 + 3)
--     ]])
--     return
-- end

if inputs.runTests then
    import('turtlescript/test.lua')
    return
end

local util = import('./util.lua')

if inputs.useMockLib then
    import('mockComputerCraftApi/init.lua').registerGlobals()
    world = _G.mockComputerCraftApi.world.createDefault()
    _G.mockComputerCraftApi.setWorld(world)

    local step = 0
    local idling = false
    local lastIdleStartAt = nil
    local lastIdleEndAt = nil
    hookListeners = util.mergeTables(
        _G.mockComputerCraftApi.hookListeners,
        {
            idleStart = function()
                idling = true
                lastIdleStartAt = step
            end,
            idleEnd = function()
                idling = false
                lastIdleEndAt = step
            end,
        }
    )

    local onStep = function(state)
        -- local SLEEP_TIME = 0.2
        local SLEEP_TIME = 0.05
        -- local SLEEP_TIME = 0.01
        if _debug.showStepByStep or true then
            step = step + 1
            _G.STEP = step
            -- if step < 5315 then return end -- Uncomment to start viewing when the tree farm is about to be built.
            if idling then return end
            if lastIdleEndAt == step - 1 then
                local skipCount = lastIdleEndAt - lastIdleStartAt
                print('Idled for '..skipCount..' steps (skipping '..(skipCount * SLEEP_TIME)..' secs)')
                _debug.busySleep(SLEEP_TIME * 30)
            end

            -- _G.mockComputerCraftApi.present.displayMap(world, { minX = -8, maxX = 5, minY = 0, maxY = 999, minZ = -5, maxZ = 5 }, { showKey = false })
            _G.mockComputerCraftApi.present.displayCentered(world, { width = 20, height = 12 })
            -- _G.mockComputerCraftApi.present.taskNames(state)
            -- _G.mockComputerCraftApi.present.inventory(world)
            -- _G.mockComputerCraftApi.present.showTurtlePosition(world)

            _debug.busySleep(SLEEP_TIME)
        end
    end
    -- _debug.registerStepListener(onStep)
end

if turtle == nil then
    print('Built-in APIs are missing. Did you intend to use --mock?')
    return
end

import('act/init.lua').registerGlobal(hookListeners)
local strategyModule = import('strategy/init.lua')
turtle.refuel(16)
strategyModule.run(onStep)

if inputs.useMockLib then
    mockComputerCraftApi.present.displayMap(world, { minX = -18, maxX = 18, minY = 0, maxY = 79, minZ = -15, maxZ = 3 }, { showKey = false })
    -- mockComputerCraftApi.present.displayMap(world, { minX = -12, maxX = 9, minY = 65, maxY = 68, minZ = -7, maxZ = 6 }, { showKey = false })
    -- mockComputerCraftApi.present.displayLayers(world, { minX = -12, maxX = 9, minY = 64, maxY = 75, minZ = -7, maxZ = 6 }, { showKey = false }) -- island
    -- mockComputerCraftApi.present.displayLayers(world, { minX = -7, maxX = 7, minY = 64, maxY = 77, minZ = -12, maxZ = -7 }, { showKey = false }) -- tree farm
    mockComputerCraftApi.present.showTurtlePosition(world)
    mockComputerCraftApi.present.now()
    mockComputerCraftApi.present.inventory(world)
end