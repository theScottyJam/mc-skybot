function parseTerminalArgs(tArgs)
    local parsedArgs = {
        basePath = nil,
        showHelp = false,
        useMockLib = false
    }

    local expectFlagValueFor = nil
    for _, tArg in ipairs(tArgs) do
        if expectFlagValueFor == '--base' then
            expectFlagValueFor = nil
            parsedArgs.basePath = tArg
        elseif tArg == '-h' or tArg == '--help' then
            parsedArgs.showHelp = true
        elseif tArg == '--mock' then
            parsedArgs.useMockLib = true
            if parsedArgs.basePath == nil then
                parsedArgs.basePath = './'
            end
        elseif tArg == '--base' then
            expectFlagValueFor = tArg
        end
    end

    if parsedArgs.basePath == nil then
        parsedArgs.basePath = '/disk/computer-craft/'
    end

    return parsedArgs
end

local inputs = parseTerminalArgs({ ... })

-- Implementation for import() --
do
    local BASE_PATH = inputs.basePath
    local moduleCache = {}
    local importStack = { 'run' }
    _G.import = function (path)
        local absPath = resolvePotentiallyRelativePath(path)
        if moduleCache[absPath] == nil then
            table.insert(importStack, absPath)
            moduleCache[absPath] = dofile(BASE_PATH..absPath)
            table.remove(importStack)
        end
        return moduleCache[absPath]
    end

    function resolvePotentiallyRelativePath(path)
        local dotSlash = string.sub(path, 1, 2) == './'
        local dotDotSlash = string.sub(path, 1, 3) == '../'
        if not dotSlash and not dotDotSlash then
            -- it's already absolute
            return path
        end
        if dotSlash then
            path = string.sub(path, 3)
        end

        local baseFilePath = importStack[#importStack]
        local basePath = dirName(baseFilePath)
        return basePath .. path
    end

    -- Givin 'abc/def/ghi.lua', this returns 'abc/def/'
    function dirName(path)
        local reversed = string.reverse(path)
        local slashPos = string.find(reversed, '/')
        if slashPos == nil then
            return ''
        else
            return string.reverse(string.sub(reversed, slashPos))
        end
    end
end

local base
local world
local hookListeners = {}
import('_debug.lua').registerGlobal()
if inputs.showHelp then
    print('USAGE: run [...flags]')
    print('  --help/-h: This help')
    print('  --mock: Load a mock library to')
    print('          emulate the turtle library.')
    print('          Useful for testing outside a')
    print('          turtle enviornment.')
    print('  --base <path>: Sets the base absolute')
    print('          path to something other than')
    print('          the default. Imports are done')
    print('          relative to this path.')
    print('          The provided path should end')
    print('          with a "/".')
    return
elseif inputs.useMockLib then
    import('mockComputerCraftApi/init.lua').registerGlobals('mockComputerCraftApi/')
    world = _G.mockComputerCraftApi.world.createDefault()
    _G.mockComputerCraftApi.setWorld(world)
    hookListeners = _G.mockComputerCraftApi.hookListeners
end

function onStep()
    if inputs.useMockLib and (debug.showStepByStep or true) then
        -- _G.mockComputerCraftApi.present.displayCentered(world)
        -- _G.mockComputerCraftApi.present.displayMap(world, { minX = -8, maxX = 5, minY = 0, maxY = 999, minZ = -5, maxZ = 5 }, { showKey = false })
        -- mockComputerCraftApi.present.showTurtlePosition(world)
        -- debug.busySleep(0.05)
    end
end

if turtle == nil then
    print('Built-in APIs are missing. Did you intend to use --mock?')
else
    import('act/init.lua').registerGlobal('act/', hookListeners)
    local strategyModule = import('strategy/init.lua')
    strategyModule.registerGlobal('strategy/')
    turtle.refuel(16)
    strategyModule.run(onStep)
end

if inputs.useMockLib then
    mockComputerCraftApi.present.displayMap(world, { minX = -8, maxX = 5, minY = 0, maxY = 79, minZ = -5, maxZ = 4 }, { showKey = false })
    -- mockComputerCraftApi.present.displayMap(world, { minX = -8, maxX = 5, minY = 65, maxY = 68, minZ = -5, maxZ = 4 }, { showKey = false })
    -- mockComputerCraftApi.present.displayLayers(world, { minX = -8, maxX = 5, minY = 65, maxY = 75, minZ = -5, maxZ = 4 }, { showKey = false })
    mockComputerCraftApi.present.showTurtlePosition(world)
    mockComputerCraftApi.present.inventory(world)
end