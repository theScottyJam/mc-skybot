#!/usr/bin/env lua

local parseTerminalArgs = function(tArgs)
    local parsedArgs = {
        basePath = nil,
        showHelp = false,
        useMockLib = false,
        runTests = false,
    }

    local expectFlagValueFor = nil
    for _, tArg in ipairs(tArgs) do
        if expectFlagValueFor == '--base' then
            expectFlagValueFor = nil
            parsedArgs.basePath = tArg
        elseif tArg == '-h' or tArg == '--help' then
            parsedArgs.showHelp = true
        elseif tArg == '--mock' then
            parsedArgs.useMockLib = true
            if parsedArgs.basePath == nil then
                parsedArgs.basePath = './'
            end
        elseif tArg == '--base' then
            expectFlagValueFor = tArg
        elseif tArg == '--test' then
            parsedArgs.runTests = true
            if parsedArgs.basePath == nil then
                parsedArgs.basePath = './'
            end
        end
    end

    if parsedArgs.basePath == nil then
        parsedArgs.basePath = '/disk/computer-craft/'
    end

    return parsedArgs
end

local inputs = parseTerminalArgs({ ... })

-- Implementation for import() --
-- Note that import() should only be called outside of functions,
-- otherwise, it won't be able to properly resolve relative module paths.
do
    local BASE_PATH = inputs.basePath
    local moduleCache = {}
    local importStack = { 'run' }
    local moduleLoader = {}

    -- Givin 'abc/def/ghi.lua', this returns 'abc/def/'
    local dirName = function(path)
        local reversed = string.reverse(path)
        local slashPos = string.find(reversed, '/')
        if slashPos == nil then
            return ''
        else
            return string.reverse(string.sub(reversed, slashPos))
        end
    end

    local resolvePotentiallyRelativePath = function(path)
        local dotSlash = string.sub(path, 1, 2) == './'
        local dotDotSlash = string.sub(path, 1, 3) == '../'
        if not dotSlash and not dotDotSlash then
            -- it's already absolute
            return path
        end
        if dotSlash then
            path = string.sub(path, 3)
        end

        local baseFilePath = importStack[#importStack]
        local basePath = dirName(baseFilePath)
        return basePath .. path
    end

    -- Can be used to help with circular dependencies.
    -- Returns an object with a `.load()` function, that can be
    -- called to retrieve the actual module at the point where you need it.
    function moduleLoader.lazyImport(path, _dofile)
        if _dofile == nil then _dofile = dofile end
        local absPath = resolvePotentiallyRelativePath(path)
        return {
            load = function()
                if moduleCache[absPath] == nil then
                    table.insert(importStack, absPath)
                    moduleCache[absPath] = _dofile(BASE_PATH..absPath)
                    table.remove(importStack)
                end
                return moduleCache[absPath]
            end
        }
    end

    function moduleLoader.import(path, _dofile)
        if _dofile == nil then _dofile = dofile end
        return moduleLoader.lazyImport(path, _dofile).load()
    end

    -- Attempts to import a module at the provided path.
    -- If the module is not found, an empty table is returned instead.
    function moduleLoader.tryImport(path)
        -- You can't catch and handle errors while calling import() or lazyImport(),
        -- because that will leave it in an invalid state (with information left on the import stack).
        -- This tryImport() implementation is carefully designed to avoid this problem
        -- by making the "try" area as small as possible.

        local _dofile = function(fullPath)
            local importedModule
            local moduleLoadError
            xpcall(
                function()
                    importedModule = dofile(fullPath)
                end,
                function(err)
                    if string.find(err, 'No such file or directory') then
                        importedModule = {}
                    else
                        moduleLoadError = err
                    end
                end
            )

            if moduleLoadError then
                error(moduleLoadError)
            end

            return importedModule
        end

        return _G.import(path, _dofile)
    end

    function moduleLoader.snapshotModuleCache()
        -- Clone and return the module cache
        local snapshot = {}
        for key, value in pairs(moduleCache) do
            snapshot[key] = value
        end
        return snapshot
    end

    function moduleLoader.restoreModuleCacheSnapshot(newModuleCache)
        moduleCache = newModuleCache
    end

    _G.moduleLoader = moduleLoader
    _G.import = moduleLoader.import -- A nice shorthand for this very common task
end

if inputs.showHelp then
    print('USAGE: run [...flags]')
    print('  --help/-h: This help')
    print('  --mock: Load a mock library to')
    print('          emulate the turtle library.')
    print('          Useful for testing outside a')
    print('          turtle enviornment.')
    print('  --base <path>: Sets the base absolute')
    print('          path to something other than')
    print('          the default. Imports are done')
    print('          relative to this path.')
    print('          The provided path should end')
    print('          with a "/".')
    print('          If not provided, will default to "./"')
    print('          or "/disk/computer-craft/", depending on')
    print('          the other flags provided (it tries to guess')
    print('          if you are developing or running it')
    print('          within Minecraft.')
    print('  --test: Run automated tests')
    return
end

-- Don't do any imports until after we've had the chance to show the help,
-- since the help explains required flags that may be needed to make imports work.
local inspect = moduleLoader.tryImport('inspect.lua') 
if inspect.registerGlobals ~= nil then
    inspect.registerGlobals()
end

if inputs.runTests then
    import('turtlescript/test.lua')
    return
end

if inputs.useMockLib then
    import('mockComputerCraftApi/init.lua').registerGlobals()
end

if turtle == nil then
    print('Built-in APIs are missing. Did you intend to use --mock?')
    return
end

local savedState = nil -- may or may not be serialized, depending on if a full pause/unpause is happening between each cycle.
local moduleCacheSnapshot = moduleLoader.snapshotModuleCache()
while true do
    -- Some of these imports may depend on the mock computer craft API being registered
    local act = import('act/init.lua')
    local planModule = import('plan/init.lua')

    local state
    if savedState == nil then
        local plan = planModule.createPlan()
        state = act.plan.createInitialState(plan)
        turtle.refuel(16)
        if inspect.onStart then
            inspect.onStart()
        end
    else
        if inspect.pauseUnpauseAfterEachSprint then
            state = act.plan.deserializeState(savedState)
        else
            state = savedState
        end
    end

    if act.plan.isPlanComplete(state) then
        break
    end

    act.plan.runNextSprint(state) -- mutates state

    if inspect.pauseUnpauseAfterEachSprint then
        -- We don't want to completely empty the module cache, as that would
        -- mess up the state of the mock computer craft API, but we do want
        -- to revert it before the point where we started importing non-mocking modules,
        -- to make sure any local variables in those modules won't persist.
        moduleLoader.restoreModuleCacheSnapshot(moduleCacheSnapshot)
        savedState = act.plan.serializeState(state)
    else
        savedState = state
    end
end

if inspect.showFinalState then
    inspect.showFinalState()
elseif inputs.useMockLib then
    print('Finished running simulated run.')
    print('Copy-paste inspect.example.lua as inspect.lua and modify it to your liking to view the results of the simulated run.')
end
